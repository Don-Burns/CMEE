Starting weekly assessment for Donal, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 61.90 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, HPC, Week5, Week2, Week4, .git, Week3, MiniProject

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
__pycache__
*.pyc
./Week4/notes # dont need the notes from Week4 on git
*.shp
.Rhistory
*.ppt*
*.odp
.idea/
.vscode**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# My CMEE Course Repository
## **Description**
A depository for following the CMEE course at Imperial College London. 
The depositoryis meant as a mean of practicing various tools useful in computational ecology such as R, python and more.
As such the material found in [The Multilingual Quantitative Biologist](https://mhasoba.github.io/TheMulQuaBio/) is the material that will be followed to get a basic grasp of how to use these tools.

## **Structure**
The course is broken into weeks with each week covering different material.  This is reflected in the folder structure of this depository. Each week's folder will contain a data, results and code folder relating to that week's topics.

## **Table of Contents**
[**Week 1**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week1)

    Unix Terminal 
    Shell Scripting (Bash)
    Latex Document creation

[**Week 2**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week2)

    Python I Week

[**Week 3**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week3)

    R Week

[**Week 4**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week4)

    Statistics Week

[**Week 5**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week5)

    GIS Week

[**Week 6**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week6)

    Bioinformatics Week

[**Week 7**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week7)

    Python II Week

[**Week 8**](https://github.com/Don-Burns/CMEECourseWork/tree/master/MiniProject)

    Mini Project Week

[**Week 7**](https://github.com/Don-Burns/CMEECourseWork/tree/master/HPC)

    HPC Week**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: Code, sandbox, data, Results

Found the following files: .gitignore, README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Week 7 CMEE Course Repository   

## Structure  
Contains [`Code`](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week7/Code) with the code produced during this week's class', [`Data`](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week7/Data) with the data required for the code to run and [`Results`](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week7/Results) which is where the code will output the resulting file of code if any is produced. This week also contains [`SandBox`](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week7/SandBox) which is where simpler concepts are tested. 

## **Table of Contents**
### [**Code**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week7/Code) - List of codes with brief descriptions.

```
DrawFW.py
```
"""
Generates a "synthetic" food web and save the plot to `../Results`
"""

```
LV1.py
```
"""
Models the Lotka-Volterra model using integration.
"""

```
LV2.py
```
"""
Models the Lotka-Volterra model Lotka-Volterra model with prey density dependence.
"""

```
LV3.py
```
"""
Discrete-time version of the Lotka-Volterra model Lotka-Volterra model with prey density dependence.
"""

```
LV4.py
```
"""
Discrete-time version of the Lotka-Volterra model Lotka-Volterra model with prey density dependence, with variation in Resources
"""

```
LV5.py
```
"""
Discrete-time version of the Lotka-Volterra model Lotka-Volterra model with prey density dependence, with variation in Resources and Consumers.
"""

```
Nets.R
```
Plots a network of the organisations invloves in the QMEE CDT programme

```
Nets.py
```
"""
A script to build a network of the QMEE CDT collaboration network.  Based on Nets.R.
"""

```
TestR.py
```
"""
Script experimenting with running R scripts with python
"""

```
blackbirds.py
```
"""
Takes `blackbirds.txt`  with species and genus present and returns the kindom, phylum and species' found as a list in terminal
"""

```
fmr.R
```
  Plots log(field metabolic rate) against log(body mass) for the Nagy et al 1999 dataset to a file fmr.pdf.

```
fmr_R.py
```
"""
Plots log(field metabolic rate) against log(body mass) for the Nagy et al 1999 dataset to a file fmr.pdf.  Is a python version of `fmr.R`.
"""

```
profileme.py
```
"""
A script containing different functions to be profiled
"""

```
profileme2.py
```
"""
A script containing different functions optimised from `profileme.py`
"""

```
run_LV.py
```
"""
run and profiles the `LV`1-5.py scripts
"""

```
timeitme.py
```
"""
Script manually profiling the `profileme.py` and `profileme2.py` scripts using `timeit`."""

```
using_os.py
```
"""
Finds all directories which start with uppercase 'C', file and directories which start with either upper or lowercase 'C' and finally all directories which start with  either upper or lowercase 'C'. The results are printed to the terminal as the number of files found in each case.
"""

### [**Data**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week7/Data)  
Where inputs for the code are stored.

### [**SandBox**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week1/SandBox)  
For any testing of code or files.**********************************************************************

Found following files in results directory: LV_model_LV2.pdf, outputFile.Rout, fmr_plot.pdf, LV_model2.pdf, LV5_Prof.txt, LV_model_LV5.pdf, LV_model.pdf, LV_model2_LV3.pdf, LV_model2_LV2.pdf, LV_model_LV4.pdf, DrawFW.pdf, TestT.Rout, LV4_Prof.txt, errorFile.Rout, LV1_Prof.txt, QMEENet.svg, LV3_Prof.txt, LV_model2_LV4.pdf, LV_model_LV3.pdf, LV2_Prof.txt, LV_model2_LV5.pdf, Results.TestR_errFile.Rout...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 23 code files: TestR.py, LV3.py, MathsInJupyterNB.ipynb, profileme2.py, MySecondJupyterNB.ipynb, timeitme.py, blackbirds.py, Nets.py, profileme.py, LV4.py, fmr.R, MyFirstJupyterNb.ipynb, using_os.py, LV1.py, LV5.py, DrawFW.py, Nets.R, run_LV.py, LV2.py, fmr_R.py, MyFirstJupyterNb-checkpoint.ipynb, MySecondJupyterNB-checkpoint.ipynb, MathsInJupyterNB-checkpoint.ipynb

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3

"""
Script experimenting with running R scripts with python
"""

__appname__ = ''
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
##################################################

import subprocess
subprocess.Popen("Rscript --verbose TestR.R > ../Results/TestT.Rout 2> ../Results/Results.TestR_errFile.Rout", shell = True).wait()

subprocess.Popen("Rscript --verbose NonExistScript.R > ../Results/outputFile.Rout 2> ../Results/errorFile.Rout", shell=True).wait()


**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.05571s

======================================================================
Inspecting script file LV3.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3

# Desc: Discrete-time version of `LV2.py`
"""
Discrete-time version of the Lotka-Volterra model Lotka-Volterra model with prey density dependence.
"""

__appname__ = 'LV3.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
###############################################################

def LV3(argv):
    ####Packages#####
    import scipy as sc
    import scipy.integrate as integrate
    import matplotlib.pylab as p 
    import sys

    #####Functions######
    def dCR_dt(pops, t = 0):
        """
        function find the change in consumers and resources at time, t, in discrete time.
        """
        R = pops[0]
        C = pops[1]
        Rt1 = sc.zeros(len(t))
        Ct1 = sc.zeros(len(t))

        for i in range(len(t)):
            if i == 0: # for first iteration
                Rt1[i] = R * (1 + r * (1 - (R/K) - a * C))
                Ct1[i] = C * (1 - z + (e * a * R)) 
            else: ## every subsequent iteration
                Rt1[i] = Rt1[i-1] * (1 + r * (1 - (Rt1[i-1]/K) - a * Ct1[i-1]))
                Ct1[i] = Ct1[i-1] * (1 - z + (e * a * Rt1[i-1])) 
                

                ### if values reach or exceed 0, stop
                if Rt1[i] <= 0:
                    break
                
                if Ct1[i] <= 0:
                    break


        # Rt1 = Rt1[~sc.isnan(Rt1)] # the ~ cause return True only on valid numbers (https://stackoverflow.com/questions/11620914/removing-nan-values-from-an-array)
        # Ct1 = Ct1[~sc.isnan(Ct1)]
        # return sc.array([Rt1.tolist(), Ct1.tolist()])        
        return sc.array([Rt1, Ct1])



    ######Main#######


    if len(sys.argv) == 1:
        r = 1. 
        a = 0.1
        z = 1.5
        e = 0.75
        print("Using default arguments for r, a, z, e")
    
    elif len(sys.argv):
        print("Not enought arguments given.  Please give r, a, z and e")

    else:
        args = sys.argv
        r = float(args[1]) 
        a = float(args[2])
        z = float(args[3])
        e = float(args[4])
        print("Using args from user in order: r, a, z, e")







    K = 30 ## K arbitrarily defined
    t = sc.linspace(0, 15, 1000)


    R0 = 10
    C0 = 5
    RC0 = sc.array([R0, C0])

    pops = dCR_dt(RC0, t)

    print(len(pops[1]))



    ######plotting######
    p.ioff()
    f1 = p.figure()

    p.plot(t, pops[0], "g-", label = "Resource density") #plot
    p.plot(t, pops[1], "b-", label = "Consumer density")
    # p.xlim(0, 1)
    p.grid()
    p.legend(loc = "best")
    p.xlabel('Time')
    p.ylabel("Population density")
    p.suptitle("Consumer-Resource population dynamics")
    p.title("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    # p.show()
    f1.savefig('../Results/LV_model_LV3.pdf') #Save figure
                ##### Practical #####
    f2 = p.figure()
    p.plot(pops[0], pops[1], "r-")
    p.grid()
    p.xlabel("Resource density")
    p.ylabel("Consumer density")
    p.suptitle("Consumer-Resource population dynamics")
    p.title("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    # p.show()
    f2.savefig("../Results/LV_model2_LV3.pdf")
    print("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    import sys 
    LV3(sys.argv)**********************************************************************

Testing LV3.py...

LV3.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Using default arguments for r, a, z, e
1000
r=1.0, a=0.1, z=1.5, e=0.75, K=30

**********************************************************************

Code ran without errors

Time consumed = 0.81265s

======================================================================
Inspecting script file MathsInJupyterNB.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "import scipy as sc\n",
    "init_printing() # to pretty print Equations (from sympy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sympy.core.symbol.Symbol"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = var('x')\n",
    "type(x) # check it's class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = var(\"a, b, c\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = var('x', real = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.is_imaginary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Symbol('x', positive = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACoAAAAPBAMAAABgjEDtAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA782r3SJ2ZjIQmUS7VIlAnjihAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAwElEQVQYGWNg/GQs72z0hQEVMAYw5BcwNKIKMsxiAIkyo4mGg0XZJqAKR4BFOUCi0Q2c3QFwWaAJ3Iq5j0LXH+A9n8DAuvwxWAooysC4dn4B0wEG/gSGLRO4JUEaQKJMDgwMPGBROQYGMaAgRNQAKsrxq7zcHC66ACrK+xckBARgEx7A1H4DiyFEmQ8wxCcwODEwTIOpZVnAwMAuwHDxJEP/BYaVDAzca+RlVnCf/3OBgeFd2hSRCZxWeROghqBRAGPPN8vbJxBHAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\mathrm{True}$$"
      ],
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x > 0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAPBAMAAACCUFuUAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMqvdmc0Qu+8iZlR2iUR1i74cAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA+UlEQVQYGWMQsv/kovo/gQEIhGJBJAzIFzAwSAiAeGxNMDEQPV+BgYFrA1ikCExCCZA42wEGEEAXn8ZwAav4SgaGPWcPgNQznl4TwDBlrSZQGdCcSgZuSwYnkHg6A4MBnxnDiwSgeIvGTwbuRob3CUBxoMABjgsMHEDNQPVAbYxn/ScAxZm/n2SQ91q1aAFYfCUDW/gEeZA429X/Dvshjga5k4HdgEF+GlB8GgPXP3mgIUAAFue/wLB/nkARwxsGBi3mAAa2AwwM8goMDAwcBQz3pRLA9lYy/mZgSWCYYv/dk4GBU+VsTpTQf823a9Y+YEjyuQZUih0AAHGBRtIqn6whAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\mathrm{False}$$"
      ],
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x < 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAbBAMAAAAt2dQtAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABYElEQVQoFY2SLUzDUBDH/+uWtIUyCgaBqSFBNgGSGRI+EiwgKgiBLNOISUAVQxB81AEOD8lwGAIYpjAEi8AiCJBKRLl790qz0LQ7cZ+/3LuXO6BMukt+GQLHHVophUy3/l0OXVd+SiHAjvuAzLAPqEtMxSOVL7ZLeaNJajofUNln0re4A1YLoBmgvna+KN0y7ixzyXNCDCTJF0x+N5NeqHohlbEMYK8XwrpU98k0jsYPQwk1ZHWSJGkC/H2SBaD6YGybeosaenrfmxyh6oRisEPj+U48qEcTqB457jHXTwW6pE6ozangMQh2g2CD/Rpe2HyyAggChkPWLOngH2hzqCF6jvw31iwp1ILa/Y1kaXDbP4HlS6ihagx1RXpw+uR9tIxRYdJOVhtXnNmSNDWcPWi0PIlSqBbhlTObki5ei5pen4tuQ2Yqc8mjBYvMa5tn6FREio7ur0HF0/R/Y+hd/QImF0Lvgv7FCwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun = (pi + x)**2; MyFun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\\\left(x + \\\\pi\\\\right)^{2}'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latex(MyFun)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\\left(x + \\pi\\right)^{2}\n"
     ]
    }
   ],
   "source": [
    "print(latex(MyFun))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068$$"
      ],
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751058209749445923078164062862\n",
       "08998628034825342117068"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi.evalf(n = 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$3.1415926535897932384626433832795028841971693993751$$"
      ],
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(pi, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHUAAAAbBAMAAACw1N2lAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAACIUlEQVQ4EZ2TP0wUURDGv7u9g1t2wcNCC0lcSLT1FSYQEwMaKpo7iguFzQWRgkYsNBgLtiKEYDgTGxso+JOIBduZ0LAkhlCAuUYLqmvsTM5ILlbknJm3b89LToM7ye18b2Z+u3Pz3gOSmTvzOBlI1CG+JGafoZ5PCr/CzSApC2yo5OxCctQtE5vy6PE/9kaKb/PzbicudfKp8ke8rxwt3OXP6OUBO6FTAyajcJu7BvunBOxNdt1VgJX1CE9gFSny7d1bhXSZk8ZsX6u1Cn6xun96zm6lqlWmjHHgmCJ7zSa9kjuIzbD7ARoSTDObukXfZXUgxfdM+XUjxBuWWtQ9C+tmI3ZCirJBxCyRH3l9Y9WXdYsdDiUg7KBhG9+XiJPt4exDmkCYXuguSmnMDrxQMWv5EWs1PLyk7nUtWLvKPXfy7SxyH2LWhWFpPnMK9rykACqxkBnjlVsqTW2XSlWd2VXsued1w/Ls7wTo+6ErmAWu+NHK9NwPFCocI9YKY/Y5sV6LpZ6Beo2fZIZtqhZrf519uuNLB2fyXWdeF/OsbLWGnHQYs1vAokRkzuip6u7rCnOkihF7RDteKeCqXprvDvH+jlJNTs5Vz5hWvaH1HugKoe0jHbzlkWlPrwzrzM4EfIq7zhrTNMTChafV0WkNyNJPrPOZjJKd3bAJt98FS/6kyf3F813Q9sCIy3q5g7q4493/13sy+Tib8mJ5OTFoyn4DlUWJXgDaBIkAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left(x + 3.1416\\right)^{2}$$"
      ],
      "text/plain": [
       "            2\n",
       "(x + 3.1416) "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(MyFun, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFYAAAAbBAMAAAAUvmV2AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABkUlEQVQ4EY2SPUjDUBDH/2kksSVtg4OOZhHExYA6+1EQ3KoQQfyg4KrSVUGoi4KLblYnd4d2cxGpg92U6uQg6CQ4qYguCvFe7uWriOaGd/f+9+Ny73JAQmtO2glJGGa2mJTVzdxbYraufCVlgfR7clavJGebhCoWHX9a2qR0qkTHcMjN2E/74S2Mbig8wzkwTcERz7nmfodAJBoBcnOHBVFbvX9gduFOfE1YlZ08jQoyrvsKXaQHmW0FRJxVjznRI9w/LOaZ3Y6wt/1rLAY97Lqu+wmIeZFNiEPWLaC3Lq5Bv8Z1tWuLmuxjdV04yQIdZVZlv8+46Hwk5YDVE+ECVhPLdOk4G46z6OXHsjb5Fy9GhKUNNeQy+XPItXSBSTbSQ6YITS6Tz2pWXtQ95bqRt2mAXmTVZ0ftfJ0U+TZvHHs21A8oJQyYcXYHmQYpK6yK8qu1WQubQPfVMovBfKeQbZC0xLL3jyUROr8HVtQye28vQ0hGQzGFdodtPCb/eqGdZIvsui+1+6CcYrWn2u8pOZwfO6dQIT3zDYsAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left(1.5 + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "(1.5 + π) "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun.subs(x, 1.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFIAAAAbBAMAAAAdVcUMAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJMqtHo0JKAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABn0lEQVQ4EY2SP0jDQBTGvzS1SWsi59RNugiOHXS19Q/OOgQRkRaF4tChq4vGxUUKnRQnRRFBBd0EUejUqYOri1ZEdBBa6eCgEN/lcucfWsmD3L37vl9e7nIPCBW1qXQoDhbrmw5HGsx+C0meax/hSCDeDksabliyRqCWouGfiDMyI3kahjtRemHyRuoPlFzhGpiRys95FJY67Ahgz+1MiLoKirsiXQKOpWi5SHheCwbfhgpJHgFNaeh7wk4qiieSzKXRVBudF8gGTVpx+UCsJEmrtbR55nleHuB/iGKcnkvW0/IXqibQ+4n67fpQP+mDwlsB9H3Esn9Jo2FXLFbm8rbwToBYG/5lWY4ze+g4Dd8o0BjFI8/vfQFEJrLIBNtX+zTzZN+hxKGApK9nqtjlCoUit6AxLMLvoAvh0YkyFTz5t/tN2lWYTG/Dv6jgRPQLom5k1RLvyZrJeu0ZZgmnXC4Kj0rrL+WBzd9kzvPeEa3glcsLwut8m8ITo+4fK+g8ZehplaqEOkTEmJK6JNR1Ijp2sjT5rEppKb7sHhEmvC+K7lb+N5WoIgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(a + 2 \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "(a + 2⋅π) "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_new = MyFun.subs(x, a+pi); MyFun_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_vec = sc.arange(0, 10, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = sc.array([N(MyFun.subs(x, xx)) for xx in x_vec]) #Note: using a list comprehension!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_new_vec = sc.array([N((MyFun_new).subs(a, xx)) for xx in x_vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7feae97c6cc0>]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7feae980abe0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = p.subplots()\n",
    "ax.plot(x_vec, MyFun_vec)\n",
    "ax.plot(x_vec, MyFun_new_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_lamb = lambdify([x], MyFun, 'numpy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = MyFun_lamb(x_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21.2 ms ± 500 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit \n",
    "MyFun_vec = sc.array([N(((x + pi)**2).subs(x, xx)) for xx in x_vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.59 µs ± 58.1 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "MyFun_vec = MyFun_lamb(x_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIAAAAAWBAMAAAD6L4mmAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABl0lEQVQ4EZ2Tv0rDUBSHf4ltGpqioX2BoOLiYF3ErRkUHZ1cHOzUrSA+QfEF7GhAqK6CKLgK9gEU6tSpq+iiFlTcYnLP/XNMi9JmuPfc8/2+Q7gkAD3NS19Wk2zGcsKZ9iQmZZnlht7H5AOY5e7kPqcYwK3ScPIBALPcYJoBzGpmfGtwcZ1pjTkaq9DL4Aqc/2+FWbvYowmlgPZH4DUzMzkqKom24J3en1NTRZ6BWihzZlOUOsbCbBy/U1NFOj5qo5egKGXJKi9sLgXUSFcWOfbttziOezARRSVIBateOHLbaUWPigD5LzRuFw83eERRAsJwfGeYD6WdbCoCuFWv64TLAItIKoGwLBTPtO5E0clLFFVFY5CsRawmLykjnAogvblAFmLTb2D3kvMNWmlXRzSVIIW4+3XZOvKAXIg+xC+iI5pKkOglfwW2LyaJRUW8OuzQGiL5HFlEUQJC2O9eYcv4+hK3G8112C08ASyiBhAQWmW+3D8YM6ATx98odrEGsIgaQIBpplQR0+HV31QkLXYfXKV6lP4ARYJq5GFzLW8AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$x^{2} + 2 \\pi x + \\pi^{2}$$"
      ],
      "text/plain": [
       " 2            2\n",
       "x  + 2⋅π⋅x + π "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(MyFun)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x**2 + 2*pi*x + pi**2\n"
     ]
    }
   ],
   "source": [
    "print(expand(MyFun))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHQAAAAWBAMAAADjiKVFAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABaUlEQVQ4EZWSsUrDQByHf4ltGpKioX2BoOLiYF3ErTcoOjq5ONipW0B8guIL2NGAUF0FseAq2AdQ0KlTV9FFDai4nTZ3l/snBkk65C7ffd8lVwKIX3DpyVmxQfsWm+kXa4RFfJu5H2VS4ts7lc9SKfXrUZkUIL7tl0uJH2RKY3IxzKDUrfZrD6kFoAnrv9MTfxd7oq37YnwEXuluikuW+HBP784FVMoz0GakVVwg7WOW8/d0OvDQpodNp8JvLGwu+Xp7ohx75hvnXPwLihNkdGpHdj8vrX6he7N4uJF+G4Isz4qqLC+1W+7IYstyST6VIgPOWRJaYXjyEoatGEx+rw5Wp3PKJYqVOT8e5EWdCeb0jNfoZblGwO1QrsZDkt6jwjCG+rQTTpC3AtPTsVLcDkxmRFCflOIE7Y+usKVLKGW7G6zD7OFJrilOUHO+MT7ISQecf8MZYS2TEkSqeKp2L8qJZ5BzE4y//AfAJWEHelxuqgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$x^{2} + 2 \\pi + \\pi^{2}$$"
      ],
      "text/plain": [
       " 2          2\n",
       "x  + 2⋅π + π "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "factor(x**2 + 2*pi + pi**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAvBAMAAADdrw/+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNIrvdRDJuPMnUAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACDElEQVRIDe2UPUgjURDH/3trPk1ErOQawQNBT3GRdB5EhEMEISk8TJlaBMM1d41ewLtTsDDlRYRsYXGFhdUJ2igIloq1RWorRSwENc7M2427y9MUy1Vmivcx83v/N2/2vQX+u/VY4bYwP+dCKgCLbQX5CO06qLsYvg4/wt6on6N/iuEeRnv1G6tAI6y9sXq9dtxk8aXoexVoCYy/JIAOW0JawFw7qLvAplbB+ACYFQlpgQwiDw4QLXsVjJKaZWZvaDDHEz2wAvQ7QMpmzDVXAVFWGGO3HhgGcrYCdtzF0vsVEmfk1AM1C7k6BPhOUPLXKh2bza8QKZOLAfwtfFW/3CYAnFoQ4B/Fz+3EFXNBhWiFXAykh1DjsAdA+pZqxMAR1XwA8V2JB3IwDhWAsSLWAwBSE6THwAgQv0GqRMNItbo1WK1ShNS5kl1X1BCADQsn1HkBrHmAd7vI1mlO1jymX+EjzMcAECuTQ7agU2Tz6FPxgEL6kNx8zFsYnA5Zc4teJG0IQIXKdmPasP2A5OBW0rxGR0W9ElehK4+YDQEKQGcpehwRgectYlyHeJ4aArCHhQkeP+ew86Uw4wAXlOTU8vaSxJsK8cm730CiTl4CkPl2OXUmhJtDrdG4dwD9pRUan7hrCfgfjmmptarVvCwNgH3vGt/Yed0tAe0PRJQ6belaAsmicJpmXvleB54AbevBYvg/zT0AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\frac{1}{\\left(a + 1\\right) \\left(a + 2\\right)}$$"
      ],
      "text/plain": [
       "       1       \n",
       "───────────────\n",
       "(a + 1)⋅(a + 2)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1 = 1/((a+1)*(a+2)); f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MathsInJupyterNB.ipynb...

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3
## Desc: A script containing different functions profiled from`profileme.py`


"""
A script containing different functions optimised from `profileme.py`
"""

__appname__ = 'profileme2.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
############################################################################

def my_squares(iters):
    """
    Takes a value and makes a list of the squares of that value in a range of that value.
    """
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    """
    Takes an int and string.  Will create a string with the string repeated for a range of the int seperated by a comma
    """
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x, y):
    """
    Takes the functions `my_join` and `my_squares` and runs them.  inputs are x= "some int", y = "some string"
    """
    print
    my_squares(x)
    my_join(x, y)
    return 0 

run_my_funcs(10000000,"My string")**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 3.69685s

======================================================================
Inspecting script file MySecondJupyterNB.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.22.0'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas  as pd\n",
    "pd.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy as sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Species</th>\n",
       "      <th>Infraorder</th>\n",
       "      <th>Family</th>\n",
       "      <th>Distribution</th>\n",
       "      <th>Body mass male (Kg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Daubentonia_madagascariensis</td>\n",
       "      <td>Chiromyiformes</td>\n",
       "      <td>Daubentoniidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>2.700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Allocebus_trichotis</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Avahi_laniger</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>1.030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Avahi_occidentalis</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Avahi_unicolor</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>0.830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Cheirogaleus_adipicaudatus</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Cheirogaleus_crossleyi</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Cheirogaleus_major</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Cheirogaleus_medius</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.217</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Species       Infraorder          Family Distribution  \\\n",
       "0  Daubentonia_madagascariensis  Chiromyiformes   Daubentoniidae   Madagascar   \n",
       "1           Allocebus_trichotis     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "2                 Avahi_laniger     Lemuriformes        Indridae      America   \n",
       "3            Avahi_occidentalis     Lemuriformes        Indridae   Madagascar   \n",
       "4                Avahi_unicolor     Lemuriformes        Indridae      America   \n",
       "5    Cheirogaleus_adipicaudatus     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "6        Cheirogaleus_crossleyi     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "7            Cheirogaleus_major     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "8           Cheirogaleus_medius     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "\n",
       "   Body mass male (Kg)  \n",
       "0                2.700  \n",
       "1                0.100  \n",
       "2                1.030  \n",
       "3                0.814  \n",
       "4                0.830  \n",
       "5                0.200  \n",
       "6                0.400  \n",
       "7                0.450  \n",
       "8                0.217  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF = pd.read_csv('../data/testcsv.csv', sep = ',')\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF = pd.DataFrame({\n",
    "   'col1': ['Var1', 'Var2', 'Var3', 'Var4'],\n",
    "   'col2': ['Grass', 'Rabbit', 'Fox', 'Wolf'],\n",
    "   'col3': [1, 2, sc.nan, 4]\n",
    "})\n",
    "\n",
    "MyDF\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displays the top 5 rows. Accepts an optional int parameter - num. of rows to show\n",
    "MyDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The number of columns. Equal to df.shape[0]\n",
    "len(MyDF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['col1', 'col2', 'col3'], dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# An array of the column names\n",
    "MyDF.columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "col1     object\n",
       "col2     object\n",
       "col3    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Columns and their types\n",
    "MyDF.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['Var1', 'Grass', 1.0],\n",
       "       ['Var2', 'Rabbit', 2.0],\n",
       "       ['Var3', 'Fox', nan],\n",
       "       ['Var4', 'Wolf', 4.0]], dtype=object)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Converts the frame to a two-dimensional table\n",
    "MyDF.values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.527525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           col3\n",
       "count  3.000000\n",
       "mean   2.333333\n",
       "std    1.527525\n",
       "min    1.000000\n",
       "25%    1.500000\n",
       "50%    2.000000\n",
       "75%    3.000000\n",
       "max    4.000000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displays descriptive stats for all columns\n",
    "MyDF.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MySecondJupyterNB.ipynb...

======================================================================
Inspecting script file timeitme.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3
"""
Script manually profiling the `profileme.py` and `profileme2.py` scripts using `timeit`.
"""

__appname__ = ''
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"

##################################################################
# loops vs. list comprehensions: which is faster?
##################################################################



iters = 1000000
import timeit 
from profileme import my_squares as my_squares_loops
from profileme2 import my_squares as my_squares_lc


# %timeit my_squares_loops(iters)
# %timeit my_squares_lc(iters)



##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################


mystring = "my string"
from profileme import my_join as my_join_join
from profileme2 import my_join as my_join

# %timeit my_join_join(iters, mystring)
# %timeit my_join(iters, mystring)



### alternative method
import time
start = time.time()
my_squares_loops(iters)
print("my_squares_loops takes %f s to run." % (time.time() - start))

start = time.time()
my_squares_lc(iters)
print("my_squares_lc takes %f s to run." % (time.time() - start))


**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00270s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3
"""
Takes `blackbirds.txt`  with species and genus present and returns the kindom, phylum and species' found as a list in terminal
"""

__appname__ = 'blackbirds.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
###############################################################
import re

# Read the file (using a different, more python 3 way, just for fun!)
with open('../data/blackbirds.txt', 'r') as f:
    text = f.read()

# replace \t's and \n's with a spaces:
text = text.replace('\t',' ')
text = text.replace('\n',' ')
# You may want to make other changes to the text. 

# In particular, note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform to ASCII:

text = text.encode('ascii', 'ignore') # first encode into ascii bytes
text = text.decode('ascii', 'ignore') # Now decode back to string

# Now extend this script so that it captures the Kingdom, Phylum and Species
# name for each species and prints it out to screen neatly.

all = re.findall(r'Kingdom\s\w*|Phylum\s\w*|Species\s\w*', text)

for i in range(len(all)): ## print loops in nice format
    if i % 3 == 0:
        print(all[i:i+3])



# Hint: you may want to use re.findall(my_reg, text)... Keep in mind that there
# are multiple ways to skin this cat! Your solution could involve multiple
# regular expression calls (easier!), or a single one (harder!)**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
['Kingdom Animalia', 'Phylum Chordata', 'Species Euphagus']
['Kingdom Animalia', 'Phylum Chordata', 'Species Euphagus']
['Kingdom Animalia', 'Phylum Chordata', 'Species Turdus']
['Kingdom Animalia', 'Phylum Chordata', 'Species Agelaius']

**********************************************************************

Code ran without errors

Time consumed = 0.02954s

======================================================================
Inspecting script file Nets.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3
# Desc: A script to build a network of the QMEE CDT collaboration network.  Based on Nets.R

#!/bin/usr/env python3

"""
A script to build a network of the QMEE CDT collaboration network.  Based on Nets.R.
"""

__appname__ = 'Nets.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
###############################################################
import scipy as sc
import pandas as pans
import networkx as nx 
import matplotlib.pylab as p

### read in data
links = pans.read_csv('../data/QMEE_Net_Mat_edges.csv', header = 0)
nodes = pans.read_csv('../data/QMEE_Net_Mat_nodes.csv', header = 0) ## row names are col 0
nodeList = list(links.columns) # find header names for links
AdjList = [None] * ((len(links))*(len(links)-1)) #adjecency list for later, -1 for diagonals .  each Node has n-1 interactions, where n is number of nodes.  are listed in same order as found in links and in AdjListKey
# posInAdjList = 0 # to track where in the adj list we are placing entries
# AdjListKey = [None] * (len(links) * (len(links)-1))
AdjList = []
for r in range(len(links)):
    for c in range(len(links)):
        if r == c: # to skip the diagonal
            None
        else:   #assign the value with direction
            # AdjList[posInAdjList] = links.iloc[r,c] 
            # AdjListKey[posInAdjList] = links.columns[r] + '-->' + links.columns[c]
            tmp = links.iloc[r,c]
            if tmp != 0:
                AdjList.append((links.columns[r],  links.columns[c], tmp))
            # AdjList[posInAdjList] = (links.columns[r],  links.columns[c], tmp)
            # posInAdjList = posInAdjList + 1

# SizRan = ([-10, 10]) # use log10 scale
# Sizs = sc.random.uniform(SizRan[0], SizRan[1], 30)


# pos = nx.circular_layout(nodeList)

G = nx.Graph()

G.add_nodes_from(nodeList)
G.add_weighted_edges_from(tuple(AdjList))


# NodSizs = 1000 * (Sizs - min(Sizs))/(max(Sizs) - min(Sizs))

f = p.figure() 
# nx.draw_networkx(G, pos, node_size = NodSizs)
nx.draw_networkx(G, node_size=500, arrowstyle='->', arrowsize=10, width=2, arrows = True)
# nx.draw_networkx_edges(G, node_size=100, arrowstyle='->', arrowsize=10, width=2)

# nx.draw_networkx_edges(G, pos, node_size=node_sizes, arrowstyle='->', arrowsize=10, edge_color=edge_colors, edge_cmap=plt.cm.Blues, width=2)  #example from documentation


# nx.drawing.nx_pylab.draw_networkx_edges(G, arrows = True, arrowstyle = "Fancy")
p.show()






**********************************************************************

Testing Nets.py...

Nets.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.01511s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3
## Desc: A script containing different functions to be profiled in `profileme2.py`


"""
A script containing different functions to be profiled
"""

__appname__ = 'profileme.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
##############################################################################

def my_squares(iters):
    """
    Takes a value and makes a list of the squares of that value in a range of that value.
    """
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    """
    Takes an int and string.  Will create a string with the string repeated for a range of the int seperated by a comma.
    """
    out = ""
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x, y):
    """
    Takes the functions `my_join` and `my_squares` and runs them.  inputs are x= "some int", y = "some string"
    """
    print(x, y)
    my_squares(x)
    my_join(x, y)
    return 0 
run_my_funcs(10000000, "My string")











**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.56794s

======================================================================
Inspecting script file LV4.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3

# Desc: Discrete-time version of `LV2.py`, with variation in Resources

"""
Discrete-time version of the Lotka-Volterra model Lotka-Volterra model with prey density dependence, with variation in Resources
"""

__appname__ = 'LV4.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
###############################################################

def LV4(argv):
    ####Packages#####
    import scipy as sc
    import scipy.stats as stats
    import scipy.integrate as integrate
    import matplotlib.pylab as p 
    import sys

    #####Functions######
    def dCR_dt(pops, t = 0):
        """
        function find the change in consumers and resources at time, t, in discrete time.
        """
        R = pops[0]
        C = pops[1]
        Rt1 = sc.zeros(len(t))
        Ct1 = sc.zeros(len(t))

        for i in range(len(t)):
            if i == 0: # for first iteration
                Rt1[i] = R * (1 + r * (1 - (R/K) - a * C))
                Ct1[i] = C * (1 - z + (e * a * R)) 
            else: ## every subsequent iteration
                Rt1[i] = Rt1[i-1] * (1 + (r+E) * (1 - (Rt1[i-1]/K) - a * Ct1[i-1]))
                Ct1[i] = Ct1[i-1] * (1 - z + (e * a * Rt1[i-1])) 
                

                ### if values reach or exceed 0, stop
                if Rt1[i] <= 0:
                    break
                
                if Ct1[i] <= 0:
                    break


        # Rt1 = Rt1[~sc.isnan(Rt1)] # the ~ cause return True only on valid numbers (https://stackoverflow.com/questions/11620914/removing-nan-values-from-an-array)
        # Ct1 = Ct1[~sc.isnan(Ct1)]
        # return sc.array([Rt1.tolist(), Ct1.tolist()])        
        return sc.array([Rt1, Ct1])



    ######Main#######


    if len(sys.argv) == 1:
        r = 1. 
        a = 0.1
        z = 1.5
        e = 0.75
        print("Using default arguments for r, a, z, e")
    
    elif len(sys.argv):
        print("Not enought arguments given.  Please give r, a, z and e")

    else:
        args = sys.argv
        r = float(args[1]) 
        a = float(args[2])
        z = float(args[3])
        e = float(args[4])
        print("Using args from user in order: r, a, z, e")







    K = 30 ## K arbitrarily defined
    t = sc.linspace(0, 15, 1000)
    E = stats.norm.rvs(1, size = 1) #random gaussian fluctuation

    R0 = 10
    C0 = 5
    RC0 = sc.array([R0, C0])

    pops = dCR_dt(RC0, t)

    print(len(pops[1]))



    ######plotting######
    p.ioff()
    f1 = p.figure()

    p.plot(t, pops[0], "g-", label = "Resource density") #plot
    p.plot(t, pops[1], "b-", label = "Consumer density")
    # p.xlim(0, 1)
    p.grid()
    p.legend(loc = "best")
    p.xlabel('Time')
    p.ylabel("Population density")
    p.suptitle("Consumer-Resource population dynamics")
    p.title("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    # p.show()
    f1.savefig('../Results/LV_model_LV4.pdf') #Save figure
                ##### Practical #####
    f2 = p.figure()
    p.plot(pops[0], pops[1], "r-")
    p.grid()
    p.xlabel("Resource density")
    p.ylabel("Consumer density")
    p.suptitle("Consumer-Resource population dynamics")
    p.title("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    # p.show()
    f2.savefig("../Results/LV_model2_LV4.pdf")
    print("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    import sys 
    LV4(sys.argv)**********************************************************************

Testing LV4.py...

LV4.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Using default arguments for r, a, z, e
1000
r=1.0, a=0.1, z=1.5, e=0.75, K=30

**********************************************************************

Code ran without errors

Time consumed = 0.93428s

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
# Desc: Plots log(field metabolic rate) against log(body mass) for the Nagy et al 1999 dataset to a file fmr.pdf.

cat("Reading CSV\n")

nagy <- read.csv('../data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../Results/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.17621s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3

"""
Finds all directories which start with uppercase 'C', file and directories which start with either upper or lowercase 'C' and finally all directories which start with  either upper or lowercase 'C'. The results are printed to the terminal as the number of files found in each case.
"""

__appname__ = 'using_os.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"


# Use the subprocess.os module to get a list of files and  directories 
# in your ubuntu home directory 

# Hint: look in subprocess.os and/or subprocess.os.path and/or 
# subprocess.os.walk for helpful functions

import subprocess
import re

#################################
#~Get a list of files and 
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")

# Create a list to store the results.
FilesDirsStartingWithC = []
FilesDirsStartingWithCc = []
FilesStartingWithCc = []

# Use a for loop to walk through the home directory.

pattern = ".*C\w*.*\/"
for (dir, subdir, files) in subprocess.os.walk(home):
    tmp = re.findall(re.compile(pattern), dir)
    if len(tmp) >0:
        FilesDirsStartingWithC.append(tmp)
print("Dirs which start with C " + str(len(FilesDirsStartingWithC)))
  
#################################
# Get files and directories in your home/ that start with either an 
# upper or lower case 'C'

# Type your code here:

pattern = ".*[Cc]\w*.*"
for (dir, subdir, files) in subprocess.os.walk(home):
    tmp = re.findall(re.compile(pattern), str(dir))
    if len(tmp) >0:
        FilesDirsStartingWithCc.append(tmp)

print("Dirs and files which start with C or c " + str(len(FilesDirsStartingWithCc)))

#################################
# Get only directories in your home/ that start with either an upper or 
#~lower case 'C' 
# Type your code here:
pattern = "\/[Cc].*\/"
for (dir, subdir, files) in subprocess.os.walk(home):
    tmp = re.findall(re.compile(pattern), str(dir))
    if len(tmp) >0:
        FilesStartingWithCc.append(tmp)
print("Dirs which start with C or c " + str(len(FilesStartingWithCc)))


**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00518s

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3
# Desc: Models the Lotka-Volterra model using integration.

"""
Models the Lotka-Volterra model using integration.
"""

__appname__ = 'LV1.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
###############################################################
####Packages#####
def LV1():
    import scipy as sc
    import scipy.integrate as integrate
    import matplotlib.pylab as p 


    #####Functions######
    def dCR_dt(pops, t = 0):
        """
        function find the change in consumers and resources at time, t.
        """
        R = pops[0]
        C = pops[1]
        dRdt = r * R - a * R * C 
        dCdt = -z * C + e * a * R * C 

        return sc.array([dRdt, dCdt])



    ######Main#######

    type(dCR_dt)

    r = 1. 
    a = 0.1
    z = 1.5
    e = 0.75

    t = sc.linspace(0, 15, 1000)


    R0 = 10
    C0 = 5
    RC0 = sc.array([R0, C0])

    pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output = True)

    pops

    type(infodict)

    infodict["message"]

    ######plotting######
    p.ioff()

    f1 = p.figure()

    p.plot(t, pops[:, 0], "g-", label = "Resource density") #plot
    p.plot(t, pops[:, 1], "b-", label = "Consumer density")
    p.grid()
    p.legend(loc = "best")
    p.xlabel('Time')
    p.ylabel("Population density")
    p.title("Consumer-Resource population dynamics")
    # p.show()
    f1.savefig('../Results/LV_model.pdf') #Save figure
                ##### Practical #####
    f2 = p.figure()
    p.plot(pops[:, 0], pops[:, 1], "r-")
    p.grid()
    p.xlabel("Resource density")
    p.ylabel("Consumer density")
    p.title("Consumer-Resource population dynamics")
    # p.show()
    f2.savefig("../Results/LV_model2.pdf")
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    LV1()







**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.78744s

======================================================================
Inspecting script file LV5.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3

# Desc: Discrete-time version of `LV2.py`, with variation in Resources and Consumers

"""
Discrete-time version of the Lotka-Volterra model Lotka-Volterra model with prey density dependence, with variation in Resources and Consumers.
"""

__appname__ = 'LV5.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
###############################################################

def LV5(argv):
    ####Packages#####
    import scipy as sc
    import scipy.stats as stats
    import scipy.integrate as integrate
    import matplotlib.pylab as p 
    import sys

    #####Functions######
    def dCR_dt(pops, t = 0):
        """
        function find the change in consumers and resources at time, t, in discrete time.
        """
        R = pops[0]
        C = pops[1]
        Rt1 = sc.zeros(len(t))
        Ct1 = sc.zeros(len(t))

        for i in range(len(t)):
            if i == 0: # for first iteration
                Rt1[i] = R * (1 + r * (1 - (R/K) - a * C))
                Ct1[i] = C * (1 - z + (e * a * R)) 
            else: ## every subsequent iteration
                Rt1[i] = Rt1[i-1] * (1 + (r + E) * (1 - (Rt1[i-1]/K) - a * Ct1[i-1]))
                Ct1[i] = Ct1[i-1] * (1 - z + E + (e * a * Rt1[i-1])) 
                

                ### if values reach or exceed 0, stop
                if Rt1[i] <= 0:
                    break
                
                if Ct1[i] <= 0:
                    break


        # Rt1 = Rt1[~sc.isnan(Rt1)] # the ~ cause return True only on valid numbers (https://stackoverflow.com/questions/11620914/removing-nan-values-from-an-array)
        # Ct1 = Ct1[~sc.isnan(Ct1)]
        # return sc.array([Rt1.tolist(), Ct1.tolist()])        
        return sc.array([Rt1, Ct1])



    ######Main#######


    if len(sys.argv) == 1:
        r = 1. 
        a = 0.1
        z = 1.5
        e = 0.75
        print("Using default arguments for r, a, z, e")
    
    elif len(sys.argv):
        print("Not enought arguments given.  Please give r, a, z and e")

    else:
        args = sys.argv
        r = float(args[1]) 
        a = float(args[2])
        z = float(args[3])
        e = float(args[4])
        print("Using args from user in order: r, a, z, e")







    K = 30 ## K arbitrarily defined
    t = sc.linspace(0, 15, 1000)
    E = stats.norm.rvs(0.5, 0.1, size = 1) #random gaussian fluctuation

    R0 = 10
    C0 = 5
    RC0 = sc.array([R0, C0])

    pops = dCR_dt(RC0, t)

    print(len(pops[1]))



    ######plotting######
    p.ioff()
    f1 = p.figure()

    p.plot(t, pops[0], "g-", label = "Resource density") #plot
    p.plot(t, pops[1], "b-", label = "Consumer density")
    # p.xlim(0, 1)
    p.grid()
    p.legend(loc = "best")
    p.xlabel('Time')
    p.ylabel("Population density")
    p.suptitle("Consumer-Resource population dynamics")
    p.title("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    # p.show()
    f1.savefig('../Results/LV_model_LV5.pdf') #Save figure
                ##### Practical #####
    f2 = p.figure()
    p.plot(pops[0], pops[1], "r-")
    p.grid()
    p.xlabel("Resource density")
    p.ylabel("Consumer density")
    p.suptitle("Consumer-Resource population dynamics")
    p.title("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    # p.show()
    f2.savefig("../Results/LV_model2_LV5.pdf")
    print("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    import sys 
    LV5(sys.argv)**********************************************************************

Testing LV5.py...

LV5.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Using default arguments for r, a, z, e
1000
r=1.0, a=0.1, z=1.5, e=0.75, K=30

**********************************************************************

Code ran without errors

Time consumed = 0.93771s

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3


"""
Generates a "synthetic" food web and save the plot to `../Results`
"""

__appname__ = 'DrawFW.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
###############################################################
## Desc: 


###PACKAGES
import networkx as nx
import scipy as sc
import matplotlib.pyplot as p 

####FUNCTIONS####

def GenRdmAdjList(N = 2, C = 0.5):
    """
    Generates a radnom adjecency list for N number of species
    """
    Ids = range(N)
    ALst = []
    for i in Ids:
        if sc.random.uniform(0, 1, 1) < C:
            Lnk = sc.random.choice(Ids, 2).tolist()
            if Lnk[0] != Lnk[1]: # avoid self cannibalistic loops
                ALst.append(Lnk)
    return ALst

####MAIN#####

MaxN = 30
C = 0.75

AdjL = sc.array(GenRdmAdjList(MaxN, C)) ## make adjecency list
AdjL
Sps = sc.unique(AdjL) # get species ids

SizRan = ([-10, 10]) # use log10 scale
Sizs = sc.random.uniform(SizRan[0], SizRan[1], MaxN)
Sizs
###plotting###

p.hist(Sizs)
# p.show()
p.hist(10 ** Sizs) ### plot raw scale
# p.show()
p.close("all") # close all open plot objects

pos = nx.circular_layout(Sps)

G = nx.Graph()

G.add_nodes_from(Sps)
G.add_edges_from(tuple(AdjL))

NodSizs = 1000 * (Sizs - min(Sizs))/(max(Sizs) - min(Sizs))

f = p.figure() 
nx.draw_networkx(G, pos, node_size = NodSizs)
# p.show()
f.savefig("../Results/DrawFW.pdf")



































**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):

======================================================================
Inspecting script file Nets.R...

File contents are:
**********************************************************************
## Desc: Plots a network of the organisations invloves in the QMEE CDT programme

###############################################################################

library(igraph) # Load the igraph package

rm(list = ls())

# 	 ICL	UoR	CEH	ZSL	CEFAS Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0

links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)

#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
        
#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7)

# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]

# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9

V(net)$size <- 50

# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight

#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"

E(net)$width <- 1+E(net)$weight/10

graphics.off()

svg("../Results/QMEENet.svg",width=7,height=7)

plot(net, edge.curved=0, vertex.label.color="black") 

legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
       col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)

dev.off()

**********************************************************************

Testing Nets.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error (or warning):
Loading required package: methods

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union


======================================================================
Inspecting script file run_LV.py...

File contents are:
**********************************************************************
## Desc: run and profiles the `LV`1-5.py scripts

"""
run and profiles the `LV`1-5.py scripts
"""

__appname__ = ''
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
########################################################

import cProfile
import pstats
import matplotlib.pylab as p
import LV1
import LV2
import LV3
import LV4
import LV5 
import sys


cProfile.run("LV1.LV1()", "../Results/LV1_Prof.txt")
cProfile.run("LV2.LV2(1)", "../Results/LV2_Prof.txt")
cProfile.run("LV3.LV3(1)", "../Results/LV3_Prof.txt")
cProfile.run("LV4.LV4(1)", "../Results/LV4_Prof.txt")
cProfile.run("LV5.LV5(1)", "../Results/LV5_Prof.txt")

LV1Stats = pstats.Stats("../Results/LV1_Prof.txt")
LV2Stats = pstats.Stats("../Results/LV2_Prof.txt")
LV3Stats = pstats.Stats("../Results/LV3_Prof.txt")
LV4Stats = pstats.Stats("../Results/LV4_Prof.txt")
LV5Stats = pstats.Stats("../Results/LV5_Prof.txt")

print("#####################TOP 5 ROWS OF PROFILE#####################")
LV1Stats.strip_dirs().sort_stats("cumulative").print_stats(5)
print("#####################TOP 5 ROWS OF PROFILE#####################")
LV2Stats.strip_dirs().sort_stats("cumulative").print_stats(5)
print("#####################TOP 5 ROWS OF PROFILE#####################")
LV3Stats.strip_dirs().sort_stats("cumulative").print_stats(5)
print("#####################TOP 5 ROWS OF PROFILE#####################")
LV4Stats.strip_dirs().sort_stats("cumulative").print_stats(5)
print("#####################TOP 5 ROWS OF PROFILE#####################")
LV5Stats.strip_dirs().sort_stats("cumulative").print_stats(5)


















**********************************************************************

Testing run_LV.py...

run_LV.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Using default arguments for r, a, z, e
r=1.0, a=0.1, z=1.5, e=0.75, K=50
Using default arguments for r, a, z, e
1000
r=1.0, a=0.1, z=1.5, e=0.75, K=30
Using default arguments for r, a, z, e
1000
r=1.0, a=0.1, z=1.5, e=0.75, K=30
Using default arguments for r, a, z, e
1000
r=1.0, a=0.1, z=1.5, e=0.75, K=30
#####################TOP 5 ROWS OF PROFILE#####################
Tue Dec  3 10:00:04 2019    ../Results/LV1_Prof.txt

         285485 function calls (280198 primitive calls) in 0.468 seconds

   
**********************************************************************

Code ran without errors

Time consumed = 2.55912s

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
#!/bin/usr/env python3

# Desc: Models the Lotka-Volterra model Lotka-Volterra model with prey density dependence.
"""
Models the Lotka-Volterra model Lotka-Volterra model with prey density dependence.
"""

__appname__ = 'LV2.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
###############################################################

def LV2(argv):
    ####Packages#####
    import scipy as sc
    import scipy.integrate as integrate
    import matplotlib.pylab as p 
    import sys

    #####Functions######
    def dCR_dt(pops, t = 0):
        """
        function find the change in consumers and resources at time, t.

        """
        R = pops[0]
        C = pops[1]
        dRdt = r * R * (1 - (R / K)) - a * R * C 
        dCdt = -z * C + e * a * R * C 

        return sc.array([dRdt, dCdt])



    ######Main#######


    if len(sys.argv) == 1:
        r = 1. 
        a = 0.1
        z = 1.5
        e = 0.75
        print("Using default arguments for r, a, z, e")
    
    elif len(sys.argv):
        print("Not enought arguments given.  Please give r, a, z and e")

    else:
        args = sys.argv
        r = float(args[1]) 
        a = float(args[2])
        z = float(args[3])
        e = float(args[4])
        print("Using args from user in order: r, a, z, e")







    K = 50 ## K arbitrarily defined
    t = sc.linspace(0, 15, 1000)


    R0 = 10
    C0 = 5
    RC0 = sc.array([R0, C0])

    pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output = True)


    ######plotting######
    p.ioff()
    f1 = p.figure()

    p.plot(t, pops[:, 0], "g-", label = "Resource density") #plot
    p.plot(t, pops[:, 1], "b-", label = "Consumer density")
    p.grid()
    p.legend(loc = "best")
    p.xlabel('Time')
    p.ylabel("Population density")
    p.suptitle("Consumer-Resource population dynamics")
    p.title("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    # p.show()
    f1.savefig('../Results/LV_model_LV2.pdf') #Save figure
                ##### Practical #####
    f2 = p.figure()
    p.plot(pops[:, 0], pops[:, 1], "r-")
    p.grid()
    p.xlabel("Resource density")
    p.ylabel("Consumer density")
    p.suptitle("Consumer-Resource population dynamics")
    p.title("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    # p.show()
    f2.savefig("../Results/LV_model2_LV2.pdf")
    print("r={}, a={}, z={}, e={}, K={}".format(r,a,z,e,K))
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    import sys 
    LV2(sys.argv)**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Using default arguments for r, a, z, e
r=1.0, a=0.1, z=1.5, e=0.75, K=50

**********************************************************************

Code ran without errors

Time consumed = 0.80504s

======================================================================
Inspecting script file fmr_R.py...

File contents are:
**********************************************************************
### Desc: Plots log(field metabolic rate) against log(body mass) for the Nagy et al 1999 dataset to a file fmr.pdf. Based upon the script `fmr.R` and runs it usign python
#!/bin/usr/env python3

"""
Plots log(field metabolic rate) against log(body mass) for the Nagy et al 1999 dataset to a file fmr.pdf.  Is a python version of `fmr.R`.
"""

__appname__ = 'fmr_R.py'
__author__ = 'Donal Burns (db319@ic.ac.uk)'
__version__ = '0.0.1'
__liscense__ = "Apache 2"
###############################################################
import subprocess

subprocess.Popen("Rscript --verbose fmr.R", shell=True).wait()

**********************************************************************

Testing fmr_R.py...

fmr_R.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Encountered error (or warning):
running
  '/usr/lib/R/bin/R --slave --no-restore --file=fmr.R'


======================================================================
Inspecting script file MyFirstJupyterNb-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for a in range(5):\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MyFirstJupyterNb-checkpoint.ipynb...

======================================================================
Inspecting script file MySecondJupyterNB-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.22.0'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas  as pd\n",
    "pd.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy as sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Species</th>\n",
       "      <th>Infraorder</th>\n",
       "      <th>Family</th>\n",
       "      <th>Distribution</th>\n",
       "      <th>Body mass male (Kg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Daubentonia_madagascariensis</td>\n",
       "      <td>Chiromyiformes</td>\n",
       "      <td>Daubentoniidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>2.700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Allocebus_trichotis</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Avahi_laniger</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>1.030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Avahi_occidentalis</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Avahi_unicolor</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>0.830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Cheirogaleus_adipicaudatus</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Cheirogaleus_crossleyi</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Cheirogaleus_major</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Cheirogaleus_medius</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.217</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Species       Infraorder          Family Distribution  \\\n",
       "0  Daubentonia_madagascariensis  Chiromyiformes   Daubentoniidae   Madagascar   \n",
       "1           Allocebus_trichotis     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "2                 Avahi_laniger     Lemuriformes        Indridae      America   \n",
       "3            Avahi_occidentalis     Lemuriformes        Indridae   Madagascar   \n",
       "4                Avahi_unicolor     Lemuriformes        Indridae      America   \n",
       "5    Cheirogaleus_adipicaudatus     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "6        Cheirogaleus_crossleyi     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "7            Cheirogaleus_major     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "8           Cheirogaleus_medius     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "\n",
       "   Body mass male (Kg)  \n",
       "0                2.700  \n",
       "1                0.100  \n",
       "2                1.030  \n",
       "3                0.814  \n",
       "4                0.830  \n",
       "5                0.200  \n",
       "6                0.400  \n",
       "7                0.450  \n",
       "8                0.217  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF = pd.read_csv('../data/testcsv.csv', sep = ',')\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF = pd.DataFrame({\n",
    "   'col1': ['Var1', 'Var2', 'Var3', 'Var4'],\n",
    "   'col2': ['Grass', 'Rabbit', 'Fox', 'Wolf'],\n",
    "   'col3': [1, 2, sc.nan, 4]\n",
    "})\n",
    "\n",
    "MyDF\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displays the top 5 rows. Accepts an optional int parameter - num. of rows to show\n",
    "MyDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The number of columns. Equal to df.shape[0]\n",
    "len(MyDF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['col1', 'col2', 'col3'], dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# An array of the column names\n",
    "MyDF.columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "col1     object\n",
       "col2     object\n",
       "col3    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Columns and their types\n",
    "MyDF.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['Var1', 'Grass', 1.0],\n",
       "       ['Var2', 'Rabbit', 2.0],\n",
       "       ['Var3', 'Fox', nan],\n",
       "       ['Var4', 'Wolf', 4.0]], dtype=object)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Converts the frame to a two-dimensional table\n",
    "MyDF.values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Displays descriptive stats for all columns\n",
    "MyDF.describe()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MySecondJupyterNB-checkpoint.ipynb...

======================================================================
Inspecting script file MathsInJupyterNB-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MathsInJupyterNB-checkpoint.ipynb...

======================================================================
======================================================================
Finished running scripts

Ran into 3 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!