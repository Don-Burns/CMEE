Starting weekly assessment for Donal, Week5

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 127.83 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Stats2, HPC, Week5, Week2, Week4, .git, C_Week, Week3, MiniProject

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
__pycache__
*.pyc
./Week4/notes # dont need the notes from Week4 on git
*.shp
.Rhistory
*.ppt*
*.odp
.idea/
.vscode**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# My CMEE Course Repository
## **Description**
A depository for following the CMEE course at Imperial College London. 
The depositoryis meant as a mean of practicing various tools useful in computational ecology such as R, python and more.
As such the material found in [The Multilingual Quantitative Biologist](https://mhasoba.github.io/TheMulQuaBio/) is the material that will be followed to get a basic grasp of how to use these tools.

## **Structure**
The course is broken into weeks with each week covering different material.  This is reflected in the folder structure of this depository. Each week's folder will contain a data, results and code folder relating to that week's topics.

## **Table of Contents**
[**Week 1**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week1)

    Unix Terminal 
    Shell Scripting (Bash)
    Latex Document creation

[**Week 2**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week2)

    Python I Week

[**Week 3**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week3)

    R Week

[**Week 4**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week4)

    Statistics Week

[**Week 5**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week5)

    GIS Week

[**Week 6**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week6)

    Bioinformatics Week

[**Week 7**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week7)

    Python II Week

[**Week 8**](https://github.com/Don-Burns/CMEECourseWork/tree/master/MiniProject)

    Mini Project Week

[**Week 7**](https://github.com/Don-Burns/CMEECourseWork/tree/master/HPC)

    HPC Week**********************************************************************

======================================================================
Looking for the weekly directories...

Found 8 weekly directories: C_Week, Week1, Week2, Week3, Week4, Week5, Week6, Week7

The Week5 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK5...

Found the following directories: Code, data

Found the following files: .gitignore, README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Week 5 CMEE Course Repository   

## Structure  
Contains [`Code`](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week5/Code) with the code produced during this week's class', [`Data`](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week5/Data) with the data required for the code to run and [`Results`](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week5/Results) which is where the code will output the resulting file of code if any is produced. This week also contains [`SandBox`](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week5/SandBox) which is where simpler concepts are tested. 

## **Table of Contents**
### [**Code**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week5/Code) - List of codes with brief descriptions.
```
GIS_Part2.R
```
  script which takes files from `../data` and creates maps.  However, many files are too large for this repository so they need to be obtained from elsewhere

```
GIS_Rpub.R
```
  A script exploring how to make, manipulate and save maps made using coordinate specified directly in code

### [**Data**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week5/Data)  
Where inputs for the code are stored.

### [**SandBox**](https://github.com/Don-Burns/CMEECourseWork/tree/master/Week1/SandBox)  
For any testing of code or files.**********************************************************************

Results directory missing!

Creating Results directory...

Found 2 code files: GIS_Part2.R, GIS_Rpub.R

Found the following extra files: .Rhistory
0.5 pt deducted per extra file

Current Points = 99.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file GIS_Part2.R...

File contents are:
**********************************************************************
## Desc: script which takes files from `../data` and creates maps.  However, many files are too large for this repository so they need to be obtained from elsewhere
rm(list = ls())
require(raster)
require(sf)
require(viridis)
require(units)

############LOADING VECTOR DATA#################
# Load a vector shapefile
ne_110 <- st_read('../data/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp')
##################LOADING RASTER DATA##############

# Read in Southern Ocean example data
so_data <- read.csv('../data/Southern_Ocean.csv', header=TRUE)
head(so_data)

# Convert the data frame to an sf object
so_data <- st_as_sf(so_data, coords=c('long', 'lat'), crs=4326)
head(so_data)

##########LOADING RASTER DATA##################
etopo_25 <- raster('../data/etopo_25.tif')
# Look at the data content
print(etopo_25)

plot(etopo_25)

### task tbd


##solution
bks <- seq(-10000, 6000, by=250)
land_cols  <- terrain.colors(24)
sea_pal <- colorRampPalette(c('darkslateblue', 'steelblue', 'paleturquoise'))
sea_cols <- sea_pal(40)
plot(etopo_25, axes=FALSE, breaks=bks, col=c(sea_cols, land_cols), 
     axis.args=list(at=seq(-10000, 6000, by=2000), lab=seq(-10,6,by=2)))


# Download bioclim data: global maximum temperature at 10 arc minute resolution
tmax <- getData('worldclim', download=TRUE, path='../data', var='tmax', res=10)

# ... and the data for those layers has been saved in our data folder.
dir('../data/wc10')

# scale the data
tmax <- tmax / 10
# Extract  January and July data and the annual maximum by location.
tmax_jan <- tmax[[1]]
tmax_jul <- tmax[[7]]
tmax_max <- max(tmax)
# Plot those maps
par(mfrow=c(3,1), mar=c(2,2,1,1))
bks <- seq(-500, 500, length=101)
pal <- colorRampPalette(c('lightblue','grey', 'firebrick'))
cols <- pal(100)
ax.args <- list(at= seq(-500, 500, by=100))
plot(tmax_jan, col=cols, breaks=bks, axis.args=ax.args, main='January maximum temperature')
plot(tmax_jul, col=cols, breaks=bks, axis.args=ax.args, main='July maximum temperature')
plot(tmax_max, col=cols, breaks=bks, axis.args=ax.args, main='Annual maximum temperature')



####################Cropping Data###################
so_extent <- extent(-60, -20, -65, -45)
# The crop function for raster data...
so_topo <- crop(etopo_25, so_extent)
# ... and the st_crop function to reduce some higher resolution coastline data
ne_10 <- st_read('../data/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp')


st_agr(ne_10) <- 'constant'
so_ne_10 <- st_crop(ne_10, so_extent)
## although coordinates are longitude/latitude, st_intersection assumes that they are planar


## task and solution
sea_pal <- colorRampPalette(c('grey30', 'grey50', 'grey70'))
plot(so_topo, col=sea_pal(100), asp=1, legend=FALSE)
contour(so_topo, levels=c(-2000, -4000, -6000), add=TRUE, col='grey80')
plot(st_geometry(so_ne_10), add=TRUE, col='grey90', border='grey40')
plot(so_data['chlorophyll'], add=TRUE, logz=TRUE, pch=20, cex=2, pal=viridis, border='white', reset=FALSE)
.image_scale(log10(so_data$chlorophyll), col=viridis(18), key.length=0.8, key.pos=4, logz=TRUE)


############# spatial joining###################
dev.off()
# extract Africa from the ne_110
 africa <- subset(ne_110, CONTINENT == 'Africa', select = c('ADMIN', 'POP_EST'))

# transform to the Robinson Projection
africa <- st_transform(africa, crs = 54030)
# create a random sample of points
mosquito_points <- st_sample(africa, 1000)

# create the plot
plot(st_geometry(africa), col = 'khaki')
plot(mosquito_points, col = 'firebrick', add = T)


mosquito_points <- st_sf(mosquito_points)
mosquito_points <- st_join(mosquito_points, africa['ADMIN'])
plot(st_geometry(africa), col = 'khaki')
plot(mosquito_points['ADMIN'], add = T)

mosquito_points_agg <- aggregate(mosquito_points, by = list(country = mosquito_points$ADMIN), FUN = length)
names(mosquito_points_agg)[2] <- 'n_outbreaks'
head(mosquito_points_agg)


africa <- st_join(africa, mosquito_points_agg)
africa$area <- as.numeric(st_area(africa))
head(africa)

par(mfrow = c(1, 2), mar = c(3, 3, 1, 1), mgp = c(2, 1, 0))
plot(n_outbreaks ~ POP_EST, data = africa, log = 'xy',
     ylab = 'Number of outbreaks', xlab = 'Population size')
plot(n_outbreaks ~ area, data = africa, log ='xy', 
     ylab = 'Number of outbreaks', xlab = 'Area (m2)')

########alien task#########







**********************************************************************

Testing GIS_Part2.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Loading required package: raster
Loading required package: methods
Loading required package: sp
Loading required package: sf
Warning message:
In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘sf’
Loading required package: viridis
Loading required package: units
Warning message:
In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘units’
Error in st_read("../data/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp") : 
  could not find function "st_read"
Execution halted

======================================================================
Inspecting script file GIS_Rpub.R...

File contents are:
**********************************************************************
# Desc: A script exploring how to make, manipulate and save maps made using coordinate specified directly in code


rm(list = ls())


require(raster)
require(sf)
require(viridis)
require(units)
pop_dens <- data.frame(n_km2 = c(260, 67, 151, 4500, 133), country = c('England', 'Scotland', 'Wales', 'London', 'Northern Ireland'))
print(pop_dens)

##############################################
##########MAKING VECTORS FROM COORDINATES#####
##############################################
# Create coordinate for each country
# - this is a list of sets of coordinates forming the edge of the polygon
# - note that they have to _close_ (have the same coordinate at either end)
scotland <- rbind(c(-5, 58.6), c(-3, 58.6), c(-4, 57.6), c(-1.5, 57.6), c(-2, 55.8), c(-3, 55), c(-5, 55), c(-6, 56), c(-5, 58.6))

england <- rbind(c(-2,55.8),c(0.5, 52.8), c(1.6, 52.8), c(0.7, 50.7), c(-5.7,50), c(-2.7, 51.5), c(-3, 53.4),c(-3, 55), c(-2,55.8))

wales <- rbind(c(-2.5, 51.3), c(-5.3,51.8), c(-4.5, 53.4), c(-2.8, 53.4),  c(-2.5, 51.3))
ireland <- rbind(c(-10,51.5), c(-10, 54.2), c(-7.5, 55.3), c(-5.9, 55.3), c(-5.9, 52.2), c(-10,51.5))


# Convert these coordinate into feature geometries
# - these are simple coordinates sets with no projection information.

scotland <- st_polygon(list(scotland))
england <- st_polygon(list(england))
wales <- st_polygon(list(wales))
ireland <- st_polygon(list(ireland))

# Combine geometries into a simple feature column
uk_eire <- st_sfc(wales, england, scotland, ireland, crs = 4326)
plot(uk_eire, asp = 1)

uk_eire_capitals <- data.frame(long = c(-.1, -3.2, -3.2, -6, -6.25), lat = c(51.5, 51.5, 55.8, 54.6, 53.3), name = c('London', 'Cardiff', 'Edinburgh', 'Belfast', 'Dublin'))

uk_eire_capitals <- st_as_sf(uk_eire_capitals, coords = c('long', 'lat'), crs = 4326)


########################################################
##########VECTRO GEOMETRY OPERATIONS####################
########################################################

st_pauls <- st_point(x = c(-0.098056, 51.513611))
london <- st_buffer(st_pauls, 0.25)

england_no_london <- st_difference(england, london)

# Count the points and show the number of rings within the polygon features
lengths(scotland)

lengths(england_no_london)

wales <- st_difference(wales, england)    


# A rough that includes Northern Ireland and surrounding sea. 
# - not the alternative way of providing the coordinates.

ni_area <- st_polygon(list(cbind(x=c(-8.1, -6, -5, -6, -8.1), y=c(54.4, 56, 55, 54, 54.4))))

northern_ireland <- st_intersection(ireland, ni_area)
eire <- st_difference(ireland, ni_area)

# Combine the final geometries
uk_eire <- st_sfc(wales, england_no_london, scotland, london, northern_ireland, eire, crs = 4326)


########################################################
##############FEATURES AND GEOMETRIES###################
########################################################

# make the UK into a single feature
uk_country <- st_union(uk_eire[-6])

# Compare six polygon features with one multipolygon feature
print(uk_eire)

print(uk_country)

# Plot them
par(mfrow = c(1, 2), mar = c(3, 3, 1, 1))
plot(uk_eire, asp = 1, col = rainbow(6))
plot(st_geometry(uk_eire_capitals), add = T)
plot(uk_country, asp = 1, col = 'lightblue')


########################################################
############VECTOR DATA AND ATTRIBUTES##################
########################################################

uk_eire <- st_sf(name = c('Wales', 'England', 'Scotland', 'London', 'Northern Ireland', 'Eire'), geometry = uk_eire)
plot(uk_eire, asp = 1)

uk_eire$capital <- c('London', 'Edinburgh', ' Cardiff', NA, 'Belfast', 'Dublin')

uk_eire <- merge(uk_eire, pop_dens, by.x = 'name', by.y = 'country', all.x = T)
print(uk_eire)


##prevents crash?
dev.off()
########################################################
#################SPATIAL ATTIBUTES######################
########################################################

uk_eire_centroids <- st_centroid(uk_eire)

uk_eire$area <- st_area(uk_eire)  ## causing crashes?!
# The length of a polygon is the perimeter length
# - nte that this includes the length of internal holes.

uk_eire$length <- st_length(uk_eire)

# look at the result
print(uk_eire)

# You can change units in a neat way
uk_eire$area <- set_units(uk_eire$area, 'km^2')
uk_eire$length <- set_units(uk_eire$length, 'km')

# And which won't let you make silly error like turning a length into weight
#uk_eire$area <- set_units(uk_eire$area, 'kg')

#Or you can simply convert the 'units' version to simple numbers
uk_eire$length <- as.numeric(uk_eire$length) # will be a string by default

print(uk_eire)

st_distance(uk_eire)

st_distance(uk_eire_centroids)

########################################################
#############PLOTTING sf OBJECTS########################
########################################################
plot(uk_eire['n_km2'], asp = 1, logz = T) #task: to log the scale, use logz or log data beforehand

########################################################
#############REPROJECTING VECTOR DATA###################
########################################################

# British National Grid (EPSG:27700)
uk_eire_BNG <- st_transform(uk_eire, 27700)

# The bounding box of the data shows the change in units
st_bbox(uk_eire)

st_bbox(uk_eire_BNG)

# UTM50N (EPSG:32650)
uk_eire_UTM50N <- st_transform(uk_eire, 32650)

# plot the results
par(mfrow = c(1, 3), mar = c(3, 3, 1, 1))
plot(st_geometry(uk_eire), asp = 1, axes = T, main = 'WGS 84')
plot(st_geometry(uk_eire), asp = 1, axes = T, main = 'OSGB 1936 / BNG')
plot(st_geometry(uk_eire_UTM50N), axes = T, main = 'UTM 50N')

########################################################
###############Proj4 STRINGS############################
########################################################
# Set up some points seperated by 1 degree latitude and longitude from St. Pauls
st_pauls <- st_sfc(st_pauls, crs = 4326) 
one_deg_west_pt <- st_sfc(st_pauls - c(1, 0), crs = 4326) # near Goring
one_deg_north_pt <- st_sfc(st_pauls + c(0, 1), crs = 4326) # near Peterborough
# Calculate the distance between St pauls and each point
st_distance(st_pauls, one_deg_west_pt)

st_distance(st_pauls, one_deg_north_pt)

st_distance(st_transform(st_pauls, 27700), st_transform(one_deg_west_pt, 27700))



####IMPROVE LONDON CIRCLE###

## task -make london buffer 25km

londonBNG <- st_buffer(st_transform(st_pauls,27700), 25000)

# In one line, transform england to BNG and cut out London
england_no_london_BNG <- st_difference(st_transform(st_sfc(england, crs = 4326), 27700), londonBNG)

# project the other features and combine everything together
others_BNG <- st_transform(st_sfc(eire, northern_ireland, scotland, wales, crs = 4326), 27700)

corrected <- c(others_BNG, londonBNG, england_no_london_BNG)

# plot that 
graphics.off()
par(mar = c(3, 3, 1, 1))
plot(corrected, main = "25km radius London", axes = T)

########################################################
#############RASTERS####################################
#######Creating a raster################################
########################################################

# create an empty raster object covering UK and Eire
uk_raster_WGS84 <- raster(xmn = -11, xmx = 2, ymn = 49.5, ymx = 59, res = .5, crs = "+init=EPSG:4326")
hasValues(uk_raster_WGS84)

## add data to raster

values(uk_raster_WGS84) <- seq(length(uk_raster_WGS84))

plot(uk_raster_WGS84)
plot(st_geometry(uk_eire), add = T, border = 'black', lwd = 2, col = "#FFFFFF44")

#############CHANGING RASTER RESOLUTION############

# define a simple 4x4 square raster
m <- matrix(c(1, 1, 3, 3,
            1, 2, 4, 3,
            5, 5, 7, 8,
            6, 6, 7, 7), ncol = 4, byrow = T)

square <- raster(m)


#########AGGREGATING RASTERS############

# average values
square_agg_mean <- aggregate(square, fact = 2, fun = mean)
values(square_agg_mean)

# Maximum values
square_agg_max <- aggregate(square, fact = 2, fun = max)
values(square_agg_max)

# modal values for categories
square_agg_modal <- aggregate(square, fact = 2, fun = modal)
values(square_agg_modal)

###############DISAGGREGATING RASTERS#################

# copy parents
square_disagg <- disaggregate(square, fact =2)

# Interpolate
square_disagg_interp <- disaggregate(square, fact = 2, method = 'bilinear')


################REPROJECTING A RASTER###################

# make two simple `sfc` objects containing points in the lower left and top right of the two grids
uk_pts_WGS84 <- st_sfc(st_point(c(-11, 49.5)), st_point(c(2, 59)), crs = 4326)
uk_pts_BNG <- st_sfc(st_point(c(-2e5, 0)), st_point(c(7e5, 1e6)), crs = 27700)

# use st_make_grid to quickly create a polygon grid with the right cellsize
uk_grid_WGS84 <- st_make_grid(uk_pts_WGS84, cellsize = 0.5)
uk_grid_BNG <- st_make_grid(uk_pts_BNG, cellsize = 1e5)

# Reproject BNG grid into WGS4
uk_grid_BNG_as_WGS84 <- st_transform(uk_grid_BNG, 4326)


# Plot the features 
plot(uk_grid_WGS84, asp = 1, border = 'grey', xlim = c(-13,4))
plot(st_geometry(uk_eire), add = T, border = 'darkgreen', lwd = 2)
plot(uk_grid_BNG_as_WGS84, border = 'red', add = T)

# Create the target raster
uk_raster_BNG <- raster(xmn=-200000, xmx=700000, ymn=0, ymx=1000000, res=100000, crs='+init=EPSG:27700')
#uk_raster_BNG_interp <- projectRaster(uk_raster_WGS84, uk_raster_BNG, method='bilinear')
#uk_raster_BNG_ngb <- projectRaster(uk_raster_WGS84, uk_raster_BNG, method='ngb')
#par(mfrow=c(1,3), mar=c(1,1,2,1))
#plot(uk_raster_BNG_interp, main='Interpolated', axes=FALSE, legend=FALSE)
#plot(uk_raster_BNG_ngb, main='Nearest Neighbour',axes=FALSE, legend=FALSE)


############VECTOR TO RASTER################

# Create the target raster
uk_20km <- raster(xmn=-200000, xmx=650000, ymn=0, ymx=1000000, res=20000, crs='+init=EPSG:27700')

# Rasterising polygons
uk_eire_poly_20km <- rasterize(as(uk_eire_BNG, 'Spatial'), uk_20km, field = 'name')

#Rasterising lines
uk_eire_BNG_line <- st_cast(uk_eire_BNG, 'LINESTRING')

st_agr(uk_eire_BNG) <- 'constant'

# Rasterising lines
uk_eire_BNG_line <- st_cast(uk_eire_BNG, 'LINESTRING')
uk_eire_line_20km <- rasterize(as(uk_eire_BNG_line, 'Spatial'), uk_20km, field = 'name')

# Rasterizing points 
# - This isn't quite as neat. You need to take two steps in the cast and need to convert 
#   the name factor to numeric.

uk_eire_BNG_point <- st_cast(st_cast(uk_eire_BNG, 'MULTIPOINT'), 'POINT')
uk_eire_BNG_point$name <- as.numeric(uk_eire_BNG_point$name)
uk_eire_point_20km <- rasterize(as(uk_eire_BNG_point, 'Spatial'), uk_20km, field = 'name')

# Plotting those different outcomes
par(mfrow = c(1, 3), mar = c(1, 1, 1, 1))
plot(uk_eire_poly_20km, col = viridis(6, alpha = .5), legend = F, axes =F)
plot(st_geometry(uk_eire_BNG), add=TRUE, border='grey')

plot(uk_eire_line_20km, col=viridis(6, alpha=0.5), legend=FALSE, axes=FALSE)
plot(st_geometry(uk_eire_BNG), add=TRUE, border='grey')

plot(uk_eire_point_20km, col=viridis(6, alpha=0.5), legend=FALSE, axes=FALSE)
plot(st_geometry(uk_eire_BNG), add=TRUE, border='grey')


#############Raster to vector#################
# rasterToPolygons returns a polygon for each cell and return a Spatial object
poly_from_rast <- rasterToPolygons(uk_eire_poly_20km)
poly_from_rast <- as(poly_from_rast, 'sf')

# but can be set to dissolve the boundaries between cells with identical values
poly_from_rast_dissolve <- rasterToPolygons(uk_eire_poly_20km, dissolve =T)
poly_from_rast_dissolve <- as(poly_from_rast_dissolve, 'sf')

# rasterToPoints returns a matrix of coordinates and values
points_from_rast <- rasterToPoints(uk_eire_poly_20km)
points_from_rast <- st_as_sf(data.frame(points_from_rast), coords = c('x','y'))


# Plot the outputs - using key.pos=NULL to suppress the key and
# reset=FALSE to avoid plot.sf altering the par() options
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(poly_from_rast['layer'], key.pos = NULL, reset = FALSE)
plot(poly_from_rast_dissolve, key.pos = NULL, reset = FALSE)
plot(points_from_rast, key.pos = NULL, reset = FALSE)

##################LOADING RASTER DATA##############
# Read in Southern Ocean example data
so_data <- read.csv('../data/Southern_Ocean.csv', header=TRUE)
head(so_data)

# Convert the data frame to an sf object
so_data <- st_as_sf(so_data, coords=c('long', 'lat'), crs=4326)
head(so_data)

##############SAVING VECTOR DATA####################

st_write(uk_eire, '../data/uk_eire_WGS84.shp')
## Writing layer `uk_eire_WGS84' to data source `data/uk_eire_WGS84.shp' using driver `ESRI Shapefile'
## Writing 6 features with 5 fields and geometry type Polygon.

st_write(uk_eire_BNG, '../data/uk_eire_BNG.shp')
## Writing layer `uk_eire_BNG' to data source `data/uk_eire_BNG.shp' using driver `ESRI Shapefile'
## Writing 6 features with 5 fields and geometry type Polygon.

st_write(uk_eire, '../data/uk_eire_WGS84.geojson')
## Writing layer `uk_eire_WGS84' to data source `data/uk_eire_WGS84.geojson' using driver `GeoJSON'
## Writing 6 features with 5 fields and geometry type Polygon.

st_write(uk_eire, '../data/uk_eire_WGS84.gpkg')
## Updating layer `uk_eire_WGS84' to data source `data/uk_eire_WGS84.gpkg' using driver `GPKG'
## Writing 6 features with 5 fields and geometry type Polygon.

st_write(uk_eire, '../data/uk_eire_WGS84.json', driver='GeoJSON')
## Writing layer `uk_eire_WGS84' to data source `data/uk_eire_WGS84.json' using driver `GeoJSON'
## Writing 6 features with 5 fields and geometry type Polygon.

**********************************************************************

Testing GIS_Rpub.R...

Output (only first 500 characters): 

**********************************************************************
  n_km2          country
1   260          England
2    67         Scotland
3   151            Wales
4  4500           London
5   133 Northern Ireland

**********************************************************************

Encountered error (or warning):
Loading required package: raster
Loading required package: methods
Loading required package: sp
Loading required package: sf
Warning message:
In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘sf’
Loading required package: viridis
Loading required package: units
Warning message:
In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘units’
Error in st_polygon(list(scotland)) : 
  could not find function "st_polygon"
Execution halted

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!